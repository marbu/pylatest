# -*- coding: utf8 -*-

# Copyright (C) 2016 mbukatov@redhat.com
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.


import textwrap
import unittest

from lxml import etree

from pylatest.document import TestActions, TestCaseDoc
from pylatest.xdocutils.client import register_plain
import pylatest.export as export


def get_empty_body_tree():
    """
    Return default body of an empty html document as if generated by docutils.
    """
    div_el = etree.Element('div', attrib={'class': 'document'})
    div_el.text = '\n'
    return div_el

def get_empty_body_str():
    """
    Return str version of body of an empty html document as if by docutils.
    """
    return etree.tostring(get_empty_body_tree())

def get_singleparagraph_body_tree():
    """
    Return body of an empty html document with an empty p element
    as the only content.
    """
    html_body = get_empty_body_tree()
    p_el = etree.SubElement(html_body, 'p')
    p_el.tail = '\n'
    return html_body, p_el

def add_action_div(elem, action_id, action_name):
    """
    Adds an action div element with given action_id and action_name into
    given element.
    """
    div_attrs = {
        'action_id': str(action_id),
        'action_name': str(action_name),
        'class': 'pylatest_action'}
    div_el = etree.SubElement(elem, 'div', attrib=div_attrs)
    div_el.tail = '\n'
    return div_el

def add_section_div(elem, section_id):
    """
    Adds a section div element (with a headline) with given into given element.
    """
    # note: section_id comes from pylatest.document.TestCaseDoc.SECTIONS_PLAINHTML
    div_attrs = {
        'id': str(section_id),
        'class': 'section'}
    div_el = etree.SubElement(elem, 'div', attrib=div_attrs)
    div_el.tail = '\n'
    h1_el = etree.SubElement(div_el, 'h1')
    h1_el.text = section_id.capitalize()
    return div_el


class TestRst2HtmlBodyTree(unittest.TestCase):
    """
    Tests of ``pylatest.export.rst2htmlbodytree`` function.
    """

    def setUp(self):
        # show full diff (note: python3 unittest diff is much better)
        self.maxDiff = None
        # register pylatest docutils extensions for htmlplain output
        register_plain()

    def test_rst2htmlbodytree_empty(self):
        self.assertEqual(
            etree.tostring(export.rst2htmlbodytree("")),
            get_empty_body_str())

    def test_rst2htmlbodytree_singleline(self):
        rst_content = textwrap.dedent('''\
        This is just a test.
        ''')
        html_body = export.rst2htmlbodytree(rst_content)
        # construct expected tree
        html_body_expected, p_el = get_singleparagraph_body_tree()
        p_el.text = "This is just a test."
        self.assertEqual(
            etree.tostring(html_body),
            etree.tostring(html_body_expected))

    def test_rst2htmlbodytree_pylatest_htmlplain(self):
        rst_content = textwrap.dedent('''\
        .. test_step:: 1

            This is just a test.
        ''')
        # TODO: if the pylatest directive is unknown, error goes to stderr!
        html_body = export.rst2htmlbodytree(rst_content)
        # construct expected tree
        html_body_expected = get_empty_body_tree()
        div_el = add_action_div(html_body_expected, '1', 'step')
        div_el.text = '\nThis is just a test.\n'
        self.assertEqual(
            etree.tostring(html_body),
            etree.tostring(html_body_expected))


class TestGetStuffFromHtmlPlain(unittest.TestCase):
    """
    Tests of functions extracting data from htmlplain format.
    """

    def setUp(self):
        # show full diff (note: python3 unittest diff is much better)
        self.maxDiff = None

    def test_get_actions_empty(self):
        body_tree = get_empty_body_tree()
        assert export.get_actions(body_tree) == TestActions()

    def test_get_actions_singleaction(self):
        # construct input
        body_tree, p_el = get_singleparagraph_body_tree()
        step_div_el = add_action_div(p_el, '1', 'step')
        step_div_el.text = "This is a test step"
        result_div_el = add_action_div(p_el, '1', 'result')
        result_div_el.text = "This is the expected result."
        # construct expected output
        exp_res = TestActions()
        exp_res.add_step(etree.tostring(step_div_el))
        exp_res.add_result(etree.tostring(result_div_el))
        # run, run
        actions = export.get_actions(body_tree)
        # checking
        assert actions == exp_res

    def test_get_section_empty(self):
        body_tree = get_empty_body_tree()
        for section in TestCaseDoc.SECTIONS_PLAINHTML:
            self.assertIsNone(export.get_section(body_tree, section))

    def test_get_section_actually_nothing(self):
        # construct input
        body_tree, p_el = get_singleparagraph_body_tree()
        add_section_div(body_tree, 'foo')
        add_section_div(body_tree, 'bar')
        # checking
        for section in TestCaseDoc.SECTIONS_PLAINHTML:
            self.assertIsNone(export.get_section(body_tree, section))

    def test_get_section_single(self):
        # construct input
        body_tree, p_el = get_singleparagraph_body_tree()
        add_section_div(body_tree, 'foo')
        section_el = add_section_div(body_tree, TestCaseDoc.SECTIONS_PLAINHTML[0])
        add_section_div(body_tree, 'bar')
        # run, run
        result_el = export.get_section(body_tree, TestCaseDoc.SECTIONS_PLAINHTML[0])
        # checking
        self.assertIsNotNone(result_el)
        assert result_el == section_el
        for section in TestCaseDoc.SECTIONS_PLAINHTML[1:]:
            self.assertIsNone(export.get_section(body_tree, section))
