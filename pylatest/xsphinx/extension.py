# -*- coding: utf8 -*-

# Copyright (C) 2017 Martin Bukatoviƒç <martin.bukatovic@gmail.com>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.


from pylatest.xdocutils import directives
from pylatest.xdocutils import htmltranslator
from pylatest.xdocutils import nodes
from pylatest.xdocutils import roles
from pylatest.xdocutils import transforms
from pylatest.xsphinx import builders


# TODO: replace this hack with a proper solution (see dosctring for details)
def pylatest_transform_handler(app):
    """
    This handler fuction adds pylatest transforms based on value of
    app.builder.

    Note that this is ugly hack: these transforms are applied after Sphinx
    parses a reST document so that that they affect doctree cached in
    `_build/doctree` directory. Which is bad because cached doctree build
    should be the same no matter which builder is used.
    """
    if isinstance(app.builder, builders.XmlExportBuilder):
        # pylatest transforms for plain format
        app.add_transform(transforms.TestActionsPlainIdTransform)
    else:
        # pylatest transforms for human readable html output,
        # translates pylatest nodes into nice sections or tables
        app.add_transform(transforms.TestActionsTableTransform)
        app.add_transform(transforms.RequirementSectionTransform)


def setup(app):
    # pylatest roles
    app.add_role("rhbz", roles.redhat_bugzilla_role)
    app.add_role("pylaref", roles.pylaref_html_role)

    # pylatest directives
    app.add_directive("test_step", directives.OldTestActionDirective)
    app.add_directive("test_result", directives.OldTestActionDirective)
    app.add_directive("test_action", directives.TestActionDirective)
    app.add_directive("requirement", directives.RequirementDirective)

    # pylatest nodes (generated by directives above)
    for node_name in nodes.node_class_names:
        node_class = getattr(nodes, node_name)
        visit_func = getattr(htmltranslator, "visit_" + node_name)
        depart_func = getattr(htmltranslator, "depart_" + node_name)
        app.add_node(node_class, html=(visit_func, depart_func))

    # pylatest transforms are added based on app.builder value
    app.connect('builder-inited', pylatest_transform_handler)

    # builder for xmlexport output
    app.add_builder(builders.XmlExportBuilder)

    # pylatest configuration
    app.add_config_value('pylatest_project_id', default=None, rebuild='html')
    app.add_config_value('pylatest_valid_export_metadata', [], 'env')

    # sphinx plugin metadata
    return {'version': '0.0.5'}
