# -*- coding: utf8 -*-

"""
ReStructuredText directives for test steps and actions.
"""

# Copyright (C) 2015 martin.bukatovic@gmail.com
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.


from docutils import nodes
from docutils.parsers import rst

from pylatest.transforms import PylatestTableTransform


class PylatestDirective(rst.Directive):
    """
    Create pending element (which contain parsed content of the directive)
    so that rst transformation is able to build final rst node tree structure
    later.
    """

    required_arguments = 1
    optional_arguments = 0
    final_argument_whitespace = False
    has_content = True

    def run(self):
        # each pylatest directive in the rst document has mandatory action id
        # (starts from 1), so there is either just one or no pylatest directive
        # with action_id == 1
        # note: action is couple of test step and result with the same action_id
        action_id = int(self.arguments[0])
        # first of all, parse text content of this directive
        # into anonymous node element (can't be used directly in the tree)
        node = nodes.Element()
        self.state.nested_parse(self.content, self.content_offset, node)
        # create new pending node, which:
        #  - holds actual data (parsed content of the directive)
        #  - references transform class which is concerned with this node.
        #  - name of the directive (test_step or test_result)
        pending = nodes.pending(PylatestTableTransform)
        # add content into pending node
        pending.details['nodes'] = node
        pending.details['action_id'] = action_id
        pending.details['action_name'] = self.name
        # since pylatest transformation will process all pylatest pending nodes
        # at once, we register only 1st test step pending node, and
        # this also means that the result generated by pylatest transform
        # will be located in the place of this first test step directive
        if action_id == 1 and self.name == "test_step":
            # without this, transformer wouldn't know about this pending node
            self.state_machine.document.note_pending(pending)
        # and finally return the pending node as the only result
        return [pending]
