# -*- coding: utf8 -*-

"""
ReStructuredText directives for test steps, actions and metadata.

Note that binding between name of directive (as used in rst file) and rst
directive class which implements it is defined in pylatest.client module.
"""

# Copyright (C) 2015 martin.bukatovic@gmail.com
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.


from docutils import nodes
from docutils.parsers import rst

from pylatest.transforms import TestStepsTableTransform
from pylatest.transforms import TestMetadataTableTransform


class TestStepsDirective(rst.Directive):
    """
    Implementation of ``test_step`` and ``test_result`` directives.

    Create pending element (which contain parsed content of the directive)
    so that rst transformation is able to build final rst node tree structure
    later.
    """

    required_arguments = 1
    optional_arguments = 0
    final_argument_whitespace = False
    has_content = True

    def run(self):
        # each pylatest directive in the rst document has mandatory action id
        # (starts from 1), so there is either just one or no pylatest directive
        # with action_id == 1
        # note: action is couple of test step and result with the same action_id
        action_id = int(self.arguments[0])
        # first of all, parse text content of this directive
        # into anonymous node element (can't be used directly in the tree)
        node = nodes.Element()
        self.state.nested_parse(self.content, self.content_offset, node)
        # create new pending node, which:
        #  - holds actual data (parsed content of the directive)
        #  - references transform class which is concerned with this node.
        #  - name of the directive (test_step or test_result)
        pending = nodes.pending(TestStepsTableTransform)
        # add content into pending node
        pending.details['nodes'] = node
        pending.details['action_id'] = action_id
        pending.details['action_name'] = self.name
        # since pylatest transformation will process all pylatest pending nodes
        # at once, we register only 1st test step pending node, and
        # this also means that the result generated by pylatest transform
        # will be located in the place of this first test step directive
        if action_id == 1 and self.name == "test_step":
            # without this, transformer wouldn't know about this pending node
            self.state_machine.document.note_pending(pending)
        # and finally return the pending node as the only result
        return [pending]


class TestMetadataDirective(rst.Directive):
    """
    Implementation of ``test_metadata`` directive.

    Create pending element (which contain content of the directive)
    so that rst transformation is able to build final rst node tree structure
    later.
    """

    required_arguments = 2
    optional_arguments = 0
    final_argument_whitespace = True
    has_content = False

    def run(self):
        # TODO: error checking
        meta_name, meta_value = self.arguments
        # create new pending node, which will:
        #  - hold metadata
        #  - reference transform class which is concerned with this node
        pending = nodes.pending(TestMetadataTableTransform)
        # add content into pending node
        pending.details['meta_name'] = meta_name
        pending.details['meta_value'] = meta_value
        # check if there is already some metadata pending node in the
        # document tree
        # TODO: this is not very smart/effective, fix it later
        meta_pending_registered = False
        for node in self.state_machine.document.traverse(nodes.pending):
            if 'meta_name' in node.details:
                meta_pending_registered = True
                break
        # since transformation will process all pending nodes
        # at once, we register only 1st test metadata pending node, and
        # this also means that the result generated by pylatest transform
        # will be located in the place of this first test step directive
        if not meta_pending_registered:
            # without this, transformer wouldn't know about this pending node
            self.state_machine.document.note_pending(pending)
        # and finally return the pending node as the only result
        return [pending]
